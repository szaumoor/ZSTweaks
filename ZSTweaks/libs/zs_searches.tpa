// unused
DEFINE_PATCH_FUNCTION ITM_TYPE_FIRST_OFFSET
INT_VAR
    type = 1
RET
    type_offset
BEGIN
    LPF CHECK_EXTENSION STR_VAR extension = "ITM" END
    PATCH_IF type < 0 OR type > 4 BEGIN
        PATCH_FAIL "Type %type% is invalid. Valid range: [0-4]"
    END
    READ_SHORT 0x68 abilities_num
    READ_LONG 0x64 curr_offset
    SET found = 0
    FOR ( ability = 0; ability < abilities_num; ++ability ) BEGIN
        PATCH_IF (BYTE_AT curr_offset) = type BEGIN
            SET type_offset = curr_offset
            found = 1
            ability = abilities_num // i.e. break
        END
        SET curr_offset += 0x38
    END
    PATCH_IF found = 0 BEGIN
        SET type_offset = "-1"
        PATCH_FAIL "Could not find an ability of type %type%"
    END
END


DEFINE_PATCH_FUNCTION ITM_FIRST_EFF_OFFSET
RET
    offset
BEGIN
    LPF CHECK_EXTENSION STR_VAR extension = "ITM" END
    READ_SHORT 0x68 abilities_num
    READ_SHORT 0x70 global_eff_num
    READ_LONG 0x64 curr_offset
    SET offset = curr_offset + (abilities_num * 0x38) + (global_eff_num * 0x30)
END

DEFINE_PATCH_FUNCTION SPL_FIRST_EFF_OFFSET
RET
    offset
BEGIN
    LPF CHECK_EXTENSION STR_VAR extension = "SPL" END
    READ_SHORT 0x68 abilities_num
    READ_SHORT 0x70 global_eff_num
    READ_LONG 0x64 curr_offset
    SET offset = curr_offset + (abilities_num * 0x28) + (global_eff_num * 0x30)
END

DEFINE_PATCH_FUNCTION LAST_VALID_HEADER
INT_VAR
    type = "-1"
    level_to_avoid = 100
RET
    result
BEGIN
    LPF CHECK_EXTENSION STR_VAR extension = "SPL" END
    READ_LONG 0x64 ability_offset
    READ_SHORT 0x68 num_abilities

    PATCH_IF num_abilities > 1 BEGIN // #1 if there's at least more than one header to look at...
        READ_SHORT (ability_offset + 0x10) first_casting_level // first header casting level
        READ_SHORT (ability_offset + 0x28 + 0x10) next_casting_level // first scaling header (i.e. second one)
        PATCH_IF next_casting_level < level_to_avoid BEGIN // #2 if the diff between both is one, let's continue...
           // PATCH_IF num_abilities > 2 BEGIN // #3 if we have more headers to examine, let's continue...
                SET found = 0
                FOR ( h = 2; h < num_abilities; ++h ) BEGIN
                    SET new_offset = ability_offset + (0x28 * h) + 0x10
                    READ_SHORT new_offset curr_casting_level
                    SET diff = curr_casting_level - next_casting_level
                    PATCH_IF diff > 1 BEGIN // #4 if the diff is more than one, we found it
                        result = h - 1
                        h = num_abilities + 1 // i.e. break
                        found = 1
                    END
                    next_casting_level = curr_casting_level
                END
                PATCH_IF found = 0 BEGIN
                    result = num_abilities - 1
                END
        END ELSE BEGIN // #2 otherwise, the last valid header in question is the previous one: the first header
            result = 0
        END
    END ELSE BEGIN // #1 otherwise, the last valid header will be the first one, or none if none are present
        result = num_abilities - 1
    END
END


DEFINE_PATCH_FUNCTION ITM_LAST_HEADER_TYPE
INT_VAR
    type = 1
RET
    result
BEGIN
    LPF CHECK_EXTENSION STR_VAR extension = "ITM" END
    READ_LONG 0x64 ability_offset
    READ_SHORT 0x68 num_abilities

    PATCH_IF num_abilities > 1 BEGIN
        SET bytes = 0x38
        SET header = 0
        FOR ( h = 1; h <= num_abilities; ++h ) BEGIN
            ability_offset += bytes * h
            SET t = BYTE_AT (ability_offset)
            PATCH_IF t = type BEGIN
                header = h
            END
        END
        result = header
    END ELSE BEGIN
        SET t = BYTE_AT (ability_offset)
        PATCH_IF t = type BEGIN
            result = 0
        END ELSE BEGIN
            result = "-1"
        END
    END
END


