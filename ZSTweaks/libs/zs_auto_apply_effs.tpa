/*
  This entire function was written by Argent77:
  https://www.gibberlings3.net/forums/topic/28835-toss-your-semi-useful-weidu-macros-here/page/4/#comment-256872
*/

// Automates adding spell effects to items or spells, based on a code sequence.
// Code format:          "param1=value1,param2=value2;...second effect..."
// Supported parameters: op (Opcode), tgt (Target), tmg (Timing), pwr (Power), p1 (Parameter1), p2 (Parameter2),
//                       rd (Resist/Dispel), dur (Duration), pro1 (Probability1), pro2 (Probability2), res (Resource),
//                       dnum (Dice Number), dsize (Dice Size), stype (Save Type), sbonus (Save Bonus), spec (Special),
//                       ip (Insert Point), t (Type)
//                       All parameters except "Opcode" are optional.
DEFINE_PATCH_FUNCTION a7_auto_apply_spl_effect
INT_VAR
  // default values if not specified in "effect_codes"
  def_target        = 0
  def_timing        = 0
  def_power         = 0
  def_parameter1    = 0
  def_parameter2    = 0
  def_resist_dispel = 0
  def_duration      = 0
  def_probability1  = 100
  def_probability2  = 0
  def_dicenumber    = 0
  def_dicesize      = 0
  def_savetype      = 0
  def_savebonus     = 0
  def_special       = 0
  def_insertpoint   = "-1"
  def_type          = 3
STR_VAR
  // Supported functions: ADD_SPELL_EFFECT, ADD_SPELL_CFEFFECT, ADD_ITEM_EFFECT, ADD_ITEM_EQEFFECT and (limited) ADD_CRE_EFFECT
  function_name     = ~~
  // The code string with effect definitions
  effect_codes      = ~~
  def_resource      = ~~
BEGIN
  PATCH_IF (NOT ~%function_name%~ STR_EQ ~~) BEGIN
    // parsing effect entries
    SET entries = 0
    SET strlen = STRING_LENGTH ~%effect_codes%~
    INNER_PATCH ~%effect_codes%~ BEGIN
      SET curOfs = 0
      WHILE (curOfs < strlen) BEGIN
        SET ofs = INDEX_BUFFER(~;~ curOfs)
        PATCH_IF (ofs < 0) BEGIN SET ofs = strlen END
        READ_ASCII curOfs entry (ofs - curOfs)
        TEXT_SPRINT EVAL ~entries_%entries%~ ~%entry%~
        SET entries += 1
        SET curOfs = ofs + 1
      END
    END

    // parsing effect parameters
    SET effects = 0
    FOR (idx = 0; idx < entries; ++idx) BEGIN
      TEXT_SPRINT entry EVAL ~%entries_%idx%%~
      SET strlen = STRING_LENGTH ~%entry%~
      INNER_PATCH ~%entry%~ BEGIN
        SET curOfs = 0
        WHILE (curOfs < strlen) BEGIN
          SET ofs = INDEX_BUFFER(~,~ curOfs)
          PATCH_IF (ofs < 0) BEGIN SET ofs = strlen END
          READ_ASCII curOfs param (ofs - curOfs)
          INNER_PATCH ~%param%~ BEGIN
            SET ofs2 = INDEX_BUFFER(~=~)
            PATCH_IF (ofs2 > 0) BEGIN
              READ_ASCII 0 v1 (ofs2)
              READ_ASCII (ofs2+1) v2 (BUFFER_LENGTH - ofs2 - 1)
              TEXT_SPRINT EVAL ~effects_%idx%_%v1%~ ~%v2%~
            END
          END
          SET curOfs = ofs + 1
        END
      END
    END
    SET effects = entries

    // adding effects
    FOR (idx = 0; idx < effects; ++idx) BEGIN
      SET opcode = (VARIABLE_IS_SET EVAL ~effects_%idx%_op~) ? EVAL ~effects_%idx%_op~ : ~-1~
      SET target = (VARIABLE_IS_SET EVAL ~effects_%idx%_tgt~) ? EVAL ~effects_%idx%_tgt~ : def_target
      SET timing = (VARIABLE_IS_SET EVAL ~effects_%idx%_tmg~) ? EVAL ~effects_%idx%_tmg~ : def_timing
      SET power = (VARIABLE_IS_SET EVAL ~effects_%idx%_pwr~) ? EVAL ~effects_%idx%_pwr~ : def_power
      SET param1 = (VARIABLE_IS_SET EVAL ~effects_%idx%_p1~) ? EVAL ~effects_%idx%_p1~ : def_parameter1
      SET param2 = (VARIABLE_IS_SET EVAL ~effects_%idx%_p2~) ? EVAL ~effects_%idx%_p2~ : def_parameter2
      SET resist_dispel = (VARIABLE_IS_SET EVAL ~effects_%idx%_rd~) ? EVAL ~effects_%idx%_rd~ : def_resist_dispel
      SET duration = (VARIABLE_IS_SET EVAL ~effects_%idx%_dur~) ? EVAL ~effects_%idx%_dur~ : def_duration
      SET prob1 = (VARIABLE_IS_SET EVAL ~effects_%idx%_pro1~) ? EVAL ~effects_%idx%_pro1~ : def_probability1
      SET prob2 = (VARIABLE_IS_SET EVAL ~effects_%idx%_pro2~) ? EVAL ~effects_%idx%_pro2~ : def_probability2
      SET dicenumber = (VARIABLE_IS_SET EVAL ~effects_%idx%_dnum~) ? EVAL ~effects_%idx%_dnum~ : def_dicenumber
      SET dicesize = (VARIABLE_IS_SET EVAL ~effects_%idx%_dsize~) ? EVAL ~effects_%idx%_dsize~ : def_dicesize
      SET savetype = (VARIABLE_IS_SET EVAL ~effects_%idx%_stype~) ? EVAL ~effects_%idx%_stype~ : def_savetype
      SET savebonus = (VARIABLE_IS_SET EVAL ~effects_%idx%_sbonus~) ? EVAL ~effects_%idx%_sbonus~ : def_savebonus
      SET special = (VARIABLE_IS_SET EVAL ~effects_%idx%_spec~) ? EVAL ~effects_%idx%_spec~ : def_special
      SET insertpoint = (VARIABLE_IS_SET EVAL ~effects_%idx%_ip~) ? EVAL ~effects_%idx%_ip~ : def_insertpoint
      SET type = (VARIABLE_IS_SET EVAL ~effects_%idx%_t~) ? EVAL ~effects_%idx%_t~ : def_type
      PATCH_IF (VARIABLE_IS_SET EVAL ~effects_%idx%_res~) BEGIN
        TEXT_SPRINT resource EVAL ~%effects_%idx%_res%~
      END ELSE BEGIN
        TEXT_SPRINT resource ~%def_resource%~
      END
      PATCH_IF (opcode >= 0) BEGIN
        LPF ~%function_name%~
        INT_VAR
          opcode        = opcode
          target        = target
          timing        = timing
          parameter1    = param1
          parameter2    = param2
          power         = power
          resist_dispel = resist_dispel
          duration      = duration
          probability1  = prob1
          probability2  = prob2
          dicenumber    = dicenumber
          dicesize      = dicesize
          savingthrow   = savetype
          savebonus     = savebonus
          special       = special
          insert_point  = insertpoint
          type          = type
        STR_VAR
          resource      = EVAL ~%resource%~
        END
      END
    END
  END
END
